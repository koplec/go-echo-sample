// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (email, age, name, bio, is_active, additional_data)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, email, age, name, bio, is_active, additional_data, created_at, updated_at
`

type CreateUserParams struct {
	Email          string         `db:"email" json:"email"`
	Age            int64          `db:"age" json:"age"`
	Name           sql.NullString `db:"name" json:"name"`
	Bio            sql.NullString `db:"bio" json:"bio"`
	IsActive       bool           `db:"is_active" json:"is_active"`
	AdditionalData sql.NullString `db:"additional_data" json:"additional_data"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.Email,
		arg.Age,
		arg.Name,
		arg.Bio,
		arg.IsActive,
		arg.AdditionalData,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Age,
		&i.Name,
		&i.Bio,
		&i.IsActive,
		&i.AdditionalData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, DeleteUser, id)
	return err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, age, name, bio, is_active, additional_data, created_at, updated_at FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Age,
		&i.Name,
		&i.Bio,
		&i.IsActive,
		&i.AdditionalData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUserByID = `-- name: GetUserByID :one
SELECT id, email, age, name, bio, is_active, additional_data, created_at, updated_at FROM users
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Age,
		&i.Name,
		&i.Bio,
		&i.IsActive,
		&i.AdditionalData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, email, age, name, bio, is_active, additional_data, created_at, updated_at FROM users
WHERE is_active = true
ORDER BY created_at DESC
LIMIT ?
`

func (q *Queries) ListUsers(ctx context.Context, limit int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, ListUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Age,
			&i.Name,
			&i.Bio,
			&i.IsActive,
			&i.AdditionalData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET email = ?, age = ?, name = ?, bio = ?, is_active = ?, additional_data = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, email, age, name, bio, is_active, additional_data, created_at, updated_at
`

type UpdateUserParams struct {
	Email          string         `db:"email" json:"email"`
	Age            int64          `db:"age" json:"age"`
	Name           sql.NullString `db:"name" json:"name"`
	Bio            sql.NullString `db:"bio" json:"bio"`
	IsActive       bool           `db:"is_active" json:"is_active"`
	AdditionalData sql.NullString `db:"additional_data" json:"additional_data"`
	ID             int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, UpdateUser,
		arg.Email,
		arg.Age,
		arg.Name,
		arg.Bio,
		arg.IsActive,
		arg.AdditionalData,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Age,
		&i.Name,
		&i.Bio,
		&i.IsActive,
		&i.AdditionalData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
